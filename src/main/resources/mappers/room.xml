<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="room">
	<resultMap type="com.scglab.connect.services.message.Message" id="message"></resultMap>
	<resultMap type="com.scglab.connect.services.room.Room" id="room"></resultMap>

	<!-- 현재 시간 방 통계 정보 -->
	<select id="getCurrentTimeStats" parameterType="map" resultType="map">
		SELECT 
		  SUM(
		    CASE WHEN r.member_id IS NOT NULL THEN 1 ELSE 0 end
		  ) AS ingCount, 
		  SUM(
		    CASE WHEN r.member_id IS NULL THEN 1 ELSE 0 end
		  ) AS readyCount, 
		  (
		    SELECT 
		      COUNT(id) AS cnt 
		    FROM 
		      chat_message 
		    WHERE 1=1 
		      AND DATE_FORMAT(create_date, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
		  ) AS newCount, 
		  (
		    SELECT 
		      COUNT(*) 
		    FROM 
		      room_join_history 
		    WHERE company_id = #{companyId}
		      and start_message_id is not null
		      AND DATE_FORMAT(end_date, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
		  ) AS endCount, 
		  (
		    SELECT 
		      COUNT(DISTINCT room_id) 
		    FROM 
		      room_join_history 
		    WHERE 
		      company_id = #{companyId}
		      AND DATE_FORMAT(create_date, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d') 
		      AND (member_id IS NULL)
		  ) AS outCount, 
		  (
		    select 
		      IFNULL(
		        AVG(
		          TIMESTAMPDIFF(SECOND, create_date, end_date)
		        ), 
		        0
		      ) 
		    from 
		      room_join_history 
		    where 
		      end_date is not null 
		      AND DATE_FORMAT(end_date, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
		  ) as speakAvgTime 
		FROM 
		  room r 
		WHERE 
		  company_id = #{companyId}
		  AND state <![CDATA[<]]> 2
				
	</select>

	<!-- 방 상태별 count(로그인 사용자 기준) : 관리자인 경우 -->
	<select id="getRoomStateCountByLoginMember" parameterType="map" resultType="map">
		SELECT
			(
				SELECT 
					count(1)
				FROM 
					room r
				WHERE
					r.company_id = #{companyId}
					AND r.state	<![CDATA[<]]> 2
					AND r.member_id is null
			) AS readyCount,
			(
				SELECT 
					count(1)
				FROM 
					room r
				WHERE
					r.company_id = #{companyId}
					AND r.state	<![CDATA[<]]> 2
					AND r.member_id IS NOT NULL
					AND (
						CASE WHEN #{memberId} IS NULL THEN 1 = 1 ELSE member_id = #{memberId} END
					)
			) AS ingCount,
			(
				SELECT 
					count(1)
				FROM 
					room r
				WHERE 
					r.company_id = #{companyId}
					AND r.state = 8
					AND (
						CASE WHEN #{memberId} IS NULL THEN 1 = 1 ELSE last_member_id = #{memberId} END
					)
			) AS endCount
	</select>

	<!-- 진행중인 방 목록 -->
	<select id="findIngState" parameterType="map" resultMap="room">
		SELECT 
		    sub_room.*, 
		    chat_message.id AS last_message_id, 
		    chat_message.message AS last_message, 
		    chat_message.create_date AS last_message_create_date, 
		    v_customer.name AS customer_name,
		    v_customer.is_block AS is_block_customer,
		    v_customer.gasapp_member_number as gasapp_member_number,
		    v_customer.tel_number as tel_number,
		    c.name as company_name,
		    TIMESTAMPDIFF(SECOND, sub_room.join_start_date, chat_message.create_date) as speak_minute,
		     (
		        SELECT COUNT(1)
		            FROM room_join_history rjh
		         WHERE rjh.room_id = sub_room.id
		              AND end_date IS NOT NULL
		      ) AS joinHistoryCount
		FROM 
		  (
		    SELECT 
		      r.*, 
		      IFNULL(
		        (
		          SELECT 
		            create_date 
		          FROM 
		            chat_message 
		          WHERE 
		            id = r.join_message_id
		        ), 
		        r.create_date
		      ) AS join_start_date, 
		      (
		        SELECT 
		          MAX(id) 
		        FROM 
		          chat_message 
		        WHERE 
		          room_id = r.id
		      ) AS recent_message_id, 
		      (
		        SELECT 
		          speaker2.id 
		        FROM 
		          room_speaker 
		          INNER JOIN speaker2 ON room_speaker.speaker_id = speaker2.id 
		        WHERE 
		          room_id = r.id 
		          AND room_speaker.is_customer = 1
		          LIMIt 1
		      ) AS customer_speaker_id, 
		      (
		        SELECT 
		          COUNT(DISTINCT chat_message.id) 
		        FROM 
		          chat_message 
		          INNER JOIN message_read ON chat_message.id = message_read.message_id 
		        WHERE
							chat_message.room_id = r.id
							AND chat_message.is_employee = 0
							AND message_read.room_id = r.id
							AND message_read.speaker_id != chat_message.speaker_id
							AND message_read.read_date IS NULL
		      ) AS no_read_count,
					(
						SELECT
							MIN(chat_message.create_date)
						FROM
							chat_message
						WHERE
							chat_message.room_id = r.id
							AND chat_message.is_employee = 0
							AND chat_message.id >= IFNULL(r.join_message_id, 0)
							AND chat_message.id > (
								SELECT
									IFNULL(MAX(id), 0)
								FROM
									chat_message
								WHERE
									is_employee = 1
									AND room_id = r.id
									AND is_system_message = 0
							)
					) AS wait_start_date,
		      mb.name as member_name
		    FROM 
		      room r
		      INNER JOIN member mb ON r.member_id = mb.id
					<if test='message != null and message != ""'>
						INNER JOIN (
							SELECT
								DISTINCT(room_id),
								room_id AS message_search_room_id
							FROM
								chat_message
							WHERE
								is_system_message = 0
								AND message_admin_type = 0
								AND message LIKE concat('%', #{message}, '%')
						) messasge_search ON r.id = messasge_search.message_search_room_id
					</if>
		    WHERE 
		      r.company_id = #{companyId} 
		      AND r.state 				<![CDATA[<]]> 2 
		      AND (
		        CASE WHEN #{memberId} IS NULL THEN 1 = 1 ELSE member_id = #{memberId} END
		      )
		      AND mb.name LIKE concat('%', #{memberName}, '%')
		  ) AS sub_room 
		  LEFT OUTER JOIN chat_message ON sub_room.recent_message_id = chat_message.id 
		  INNER JOIN v_customer ON sub_room.customer_speaker_id = v_customer.speaker_id
		  INNER JOIN company c ON sub_room.company_id = c.id
		WHERE 
		  v_customer.company_id = #{companyId}
		  AND v_customer.name LIKE concat('%', #{customerName}, '%')
		ORDER BY 
		  last_message_create_date DESC
	</select>

	<!-- 대기중인 방 목록. -->
	<select id="findReadyState" parameterType="map" resultMap="room">
		SELECT 
		    sub_room.*, 
		    chat_message.id AS last_message_id, 
		    chat_message.message AS last_message, 
		    chat_message.create_date AS last_message_create_date, 
		    v_customer.name AS customer_name,
		    v_customer.is_block AS is_block_customer,
		    v_customer.gasapp_member_number as gasapp_member_number,
		    v_customer.tel_number as tel_number,
		    c.name as company_name,
		    TIMESTAMPDIFF(SECOND, sub_room.join_start_date, chat_message.create_date) as speak_minute,
		     (
		        SELECT COUNT(1)
		            FROM room_join_history rjh
		         WHERE rjh.room_id = sub_room.id
		              AND end_date IS NOT NULL
		      ) AS joinHistoryCount
		FROM 
		  (
		    SELECT 
		      r.*, 
		      IFNULL(
		        (
		          SELECT 
		            create_date 
		          FROM 
		            chat_message 
		          WHERE 
		            id = r.join_message_id
		        ), 
		        r.create_date
		      ) AS join_start_date, 
		      (
		        SELECT 
		          MAX(id) 
		        FROM 
		          chat_message 
		        WHERE 
		          room_id = r.id
		      ) AS recent_message_id, 
		      (
		        SELECT 
		          speaker2.id 
		        FROM 
		          room_speaker 
		          INNER JOIN speaker2 ON room_speaker.speaker_id = speaker2.id 
		        WHERE 
		          room_id = r.id 
		          AND room_speaker.is_customer = 1
		      ) AS customer_speaker_id,
		      (
		        SELECT 
		          COUNT(DISTINCT chat_message.id) 
		        FROM 
		          chat_message
		        WHERE 
		          chat_message.room_id = r.id 
		          AND chat_message.is_employee = 0
							AND chat_message.id > (
									SELECT
										IFNULL(MAX(id), 0)
									FROM
										chat_message
									WHERE
										is_employee = 1
										AND room_id = r.id
							)
							AND chat_message.id >= r.join_message_id
							AND speaker_id is not null
		      ) AS no_read_count,
		      (
							SELECT
								MIN(chat_message.create_date)
							FROM
								chat_message
							WHERE
								chat_message.room_id = r.id
								AND chat_message.is_employee = 0
								AND chat_message.id >= IFNULL(r.join_message_id, 0)
								AND chat_message.id > (
									SELECT
										IFNULL(MAX(id), 0)
									FROM
										chat_message
									WHERE
										is_employee = 1
										AND room_id = r.id
										AND is_system_message = 0
							)
		      ) AS wait_start_date,
		      mb.name as member_name
		    FROM 
		      room r
		      LEFT OUTER JOIN member mb ON r.last_member_id = mb.id
		                      AND mb.name LIKE concat('%', #{memberName}, '%')
		    WHERE 
		      r.company_id = #{companyId}
		      AND r.state 				<![CDATA[<]]> 2 
		      AND r.member_id IS NULL
		  ) AS sub_room 
		  LEFT OUTER JOIN chat_message ON sub_room.recent_message_id = chat_message.id 
		  INNER JOIN v_customer ON sub_room.customer_speaker_id = v_customer.speaker_id
		  INNER JOIN company c ON sub_room.company_id = c.id
		WHERE 
		  v_customer.company_id = #{companyId}
		  AND v_customer.name LIKE concat('%', #{customerName}, '%')
		ORDER BY ${sort}
	</select>

	<!-- 종료된 방 목록. -->
	<select id="findCloseState" parameterType="map" resultMap="room">
		SELECT 
		    sub_room.*, 
		    chat_message.id AS last_message_id, 
		    chat_message.message AS last_message, 
		    chat_message.create_date AS last_message_create_date, 
		    v_customer.name AS customer_name,
		    v_customer.is_block AS is_block_customer,
		    v_customer.gasapp_member_number as gasapp_member_number,
		    v_customer.tel_number as tel_number,
		    TIMESTAMPDIFF(SECOND, sub_room.join_start_date, chat_message.create_date) as speak_minute,
		     (
		        SELECT COUNT(1)
		            FROM room_join_history rjh
		         WHERE rjh.room_id = sub_room.id
		              AND end_date IS NOT NULL
		      ) AS joinHistoryCount
		FROM 
		  (
		    SELECT 
		      r.*, 
		      IFNULL(
		        (
		          SELECT 
		            create_date 
		          FROM 
		            chat_message 
		          WHERE 
		            id = r.join_message_id
		        ), 
		        r.create_date
		      ) AS join_start_date, 
		      (
		        SELECT 
		          MAX(id) 
		        FROM 
		          chat_message 
		        WHERE 
		          room_id = r.id
		      ) AS recent_message_id, 
		      (
		        SELECT 
		          speaker2.id 
		        FROM 
		          room_speaker 
		          INNER JOIN speaker2 ON room_speaker.speaker_id = speaker2.id 
		        WHERE 
		          room_id = r.id 
		          AND room_speaker.is_customer = 1
		          LIMIt 1
		      ) AS customer_speaker_id,
		      mb.name as member_name
		    FROM 
		      room r
					<if test='message != null and message != ""'>
						INNER JOIN (
							SELECT
								DISTINCT(room_id),
								room_id AS message_search_room_id
							FROM
								chat_message
							WHERE
								is_system_message = 0
								AND message_admin_type = 0
								AND message LIKE concat('%', #{message}, '%')
						) messasge_search ON r.id = messasge_search.message_search_room_id
					</if>
		      LEFT OUTER JOIN member mb ON r.last_member_id = mb.id
		                      AND mb.name LIKE concat('%', #{memberName}, '%')
		    WHERE 
		      r.company_id = #{companyId} 
		      AND r.state = 8
		      AND (
		        CASE WHEN #{memberId} IS NULL THEN 1 = 1 ELSE last_member_id = #{memberId} END
		      )
		<if test='startDate != null and startDate != "" and endDate != null and endDate != ""'>
		      	AND date_format(end_date, '%Y-%m-%d') BETWEEN #{startDate} AND #{endDate}
		</if>
		      
		  ) AS sub_room 
		  LEFT OUTER JOIN chat_message ON sub_room.recent_message_id = chat_message.id 
		  INNER JOIN v_customer ON sub_room.customer_speaker_id = v_customer.speaker_id 
		WHERE 
		  v_customer.company_id = #{companyId}
		  AND v_customer.name LIKE concat('%', #{customerName}, '%')
		ORDER BY 
		  last_message_create_date DESC
	</select>

	<!-- 이전 상담 검색 -->
	<select id="findSearchJoinHistory" parameterType="map" resultType="map">
		SELECT rjh.id AS id,
		       rjh.create_date AS joinStartDate,
		       TIMESTAMPDIFF(SECOND, rjh.create_date, rjh.end_date) speakMinute,
		       rjh.create_date as createDate,
		       rjh.update_date as updateDate,
		       rjh.update_member_id as updateMemberId,
		       rjh.member_id as memberId,
		       rjh.room_id as roomId,
		       rjh.company_id as companyId,
		       rjh.start_message_id as startMessageId,
		       rjh.end_message_id as endMessageId,
		       rjh.end_date as endDate,
		       rjh.last_member_id as lastMemberId,
		       rjh.category_small_id as categorySmallId,
		       rjh.join_history_json as joinHistoryJson,
		       mb.name AS memberName,
		       mb2.name AS lastMemberName,
		       (SELECT GROUP_CONCAT(DISTINCT message_detail)
		           FROM chat_message
		        WHERE room_id = #{roomId} AND id BETWEEN rjh.start_message_id 
		              AND rjh.end_message_id
									AND message_detail != '') AS detailTags,
						(SELECT GROUP_CONCAT(DISTINCT category_small.name)
							FROM chat_message left outer join template2 ON chat_message.template_id = template2.id
																left outer join category_small on chat_message.id = category_small.id = template2.category_small_id
							WHERE chat_message.room_id = #{roomId}
								AND chat_message.id BETWEEN IFNULL(rjh.start_message_id, 0)
								AND rjh.end_message_id) AS templateTags
		FROM   room_join_history rjh 
		       INNER JOIN chat_message m 
		               ON rjh.start_message_id = m.id 
		       LEFT OUTER JOIN member mb 
		              ON mb.id = rjh.member_id 
		       LEFT OUTER JOIN speaker2 sp 
		              ON mb.speaker_id = sp.id
		       LEFT OUTER JOIN member mb2
		              ON mb2.id = rjh.last_member_id 
		WHERE  rjh.room_id = #{roomId}
		       AND rjh.end_date IS NOT NULL 
		       AND rjh.room_id IN(SELECT DISTINCT room_id 
		                          FROM   chat_message 
		                          WHERE  room_id = #{roomId} 
		                                 AND id BETWEEN rjh.start_message_id AND rjh.end_message_id 
		                                 AND is_system_message = 0 
		                                 AND message_admin_type = 0 
		<if test='message != null'>
		                                 	AND message LIKE CONCAT('%', #{message}, '%')
		</if>
								)         
		ORDER  BY rjh.id DESC 
	</select>


	<!-- 방 종료시키기 -->
	<select id="closeRoom" parameterType="map" statementType="CALLABLE">
		CALL close_room(#{roomId}, #{loginId})
	</select>

	<!-- 방 이관시키기 -->
	<update id="transferRoom" parameterType="map" statementType="CALLABLE">
		CALL transfer_room(#{transferType}, #{roomId}, #{memberId}, #{loginId})
	</update>

	<!-- 방 상담사 매칭시키기 -->
	<update id="matchRoom" parameterType="map" statementType="CALLABLE">
		CALL match_room(#{roomId}, #{memberId})
	</update>

	<!-- 방 상세. -->
	<select id="getDetail" parameterType="map" resultMap="room">
		SELECT 
		  sub_room.*, 
		  chat_message.id AS last_message_id, 
		  chat_message.message AS last_message, 
		  chat_message.create_date AS last_message_create_date,
			v_customer.customer_id AS customer_id,
		  v_customer.name AS customer_name,
		  v_customer.is_block AS is_block_customer,
		  v_customer.block_type as blockType,
		  v_customer.remark as remark,
			v_customer.gasapp_member_number as gasapp_member_number,
			v_customer.tel_number as tel_number,
			TIMESTAMPDIFF(SECOND, sub_room.join_start_date, chat_message.create_date) as speak_minute,
			 (
					SELECT COUNT(1)
							FROM room_join_history rjh
					 WHERE rjh.room_id = sub_room.id
								AND end_date IS NOT NULL
								AND start_message_id IS NOT NULL
				) AS joinHistoryCount,
				(
					SELECT COUNT(1)
					FROM minwon_history
					WHERE room_id = sub_room.id
			) AS minwon_history_count,
			v_customer.swear_count AS swear_count,
			v_customer.insult_count AS insult_count
		FROM 
		  (
		    SELECT 
		      r.*, 
		      IFNULL(
		        (
		          SELECT 
		            create_date 
		          FROM 
		            chat_message 
		          WHERE 
		            id = r.join_message_id
		        ), 
		        r.create_date
		      ) AS join_start_date, 
		      (
		        SELECT 
		          MAX(id) 
		        FROM 
		          chat_message 
		        WHERE 
		          room_id = r.id
		      ) AS recent_message_id, 
		      (
		        SELECT 
		          speaker2.id 
		        FROM 
		          room_speaker 
		          INNER JOIN speaker2 ON room_speaker.speaker_id = speaker2.id 
		        WHERE 
		          room_id = r.id 
		          AND room_speaker.is_customer = 1
		      ) AS customer_speaker_id,
		      (
		        SELECT 
		          COUNT(DISTINCT chat_message.id) 
		        FROM 
		          chat_message 
		          INNER JOIN message_read ON chat_message.id = message_read.message_id 
		        WHERE 
		          chat_message.room_id = r.id 
		          AND chat_message.is_employee = 0 
		          AND message_read.speaker_id != chat_message.speaker_id 
		          AND message_read.read_date IS NULL 
		          AND chat_message.id > (
		            SELECT 
		              MAX(id) 
		            FROM 
		              chat_message 
		            WHERE 
		              is_employee = 1 
		              AND room_id = r.id
		          )
		      ) AS no_read_count,
					(
						SELECT
							MIN(chat_message.create_date)
						FROM
							chat_message
						WHERE
							chat_message.room_id = r.id
							AND chat_message.is_employee = 0
							AND chat_message.id >= IFNULL(r.join_message_id, 0)
							AND chat_message.id > (
										SELECT
											IFNULL(MAX(id), 0)
										FROM
											chat_message
										WHERE
											is_employee = 1
											AND room_id = r.id
											AND is_system_message = 0
							)
					) AS wait_start_date
		    FROM 
		      room r 
		    WHERE 
		      id = #{id}
		  ) AS sub_room
		  LEFT OUTER JOIN chat_message ON sub_room.recent_message_id = chat_message.id 
		  INNER JOIN v_customer ON sub_room.customer_speaker_id = v_customer.speaker_id
	</select>

	<!-- 방 조인 -->
	<select id="joinRoom" parameterType="map" resultType="map" statementType="CALLABLE">
		CALL join_room(
			#{roomId, mode=IN, jdbcType=INTEGER}, 
			#{speakerId, mode=IN, jdbcType=INTEGER},
			#{readLastMessageId, mode=OUT, jdbcType=INTEGER},
			#{maxMessageId, mode=OUT, jdbcType=INTEGER}			
		)
	</select>

	<!-- 방 온라인 설정 -->
	<update id="updateOnline" parameterType="map">
		UPDATE room 
		SET    is_online = #{isOnline} 
		WHERE  id = #{id}
	</update>

	<!-- 방 상세정보(speaer id기준) -->
	<select id="getDetailBySpeakerId" parameterType="map" resultMap="room">
		SELECT *
		FROM  room 
		WHERE id = (
			SELECT room_id 
            FROM   room_speaker 
            WHERE speaker_id = #{speakerId}
		) 
	</select>

	<!-- 챗봇 이력 저장. -->
	<update id="updateJoinHistory" parameterType="map">
		UPDATE room 
		SET  join_history_json = #{history} 
		WHERE id = #{roomId}
	</update>

	<!-- 방 종료 상세 정보 -->
	<select id="getRoomJoinHistoryDetail" parameterType="map" resultType="map">
		SELECT *
		FROM   room_join_history 
		WHERE  id = #{id}
	</select>

	<!-- 메세지 조회 -->
	<select id="findSearchRangeById" parameterType="map" resultType="map">
		SELECT * 
		FROM   chat_message 
		WHERE  room_id = #{roomId}
		AND    id BETWEEN #{startId} AND #{endId} 
		AND    is_system_message = 0 
		AND    message_admin_type = 0
	</select>

	<!-- chatid의 카테고리 소분류 정보 수정 -->
	<update id="updateJoinHistoryByChatId" parameterType="map">
		UPDATE room_join_history
		SET category_small_id = #{categorySmallId}
		WHERE id = #{chatid}
	</update>

	<!-- chatid에 대한하는 room history 조회 -->
	<select id="findRoomHistoryByChatId" parameterType="map" resultType="map">
		select a.id
				,a.create_date as createdate
				,a.end_date as enddate
				,a.room_id as space
				,a.start_message_id as startid
				,a.end_message_id as endid
				,ifnull(a.last_member_id, a.member_id ) as lastemp
		from room_join_history a
		where 1=1
		and a.end_date is not null
		and a.room_id = (
			select r.id
			from room r 
			where 1=1
			and r.chatid = #{chatId}
			order by r.id desc
			limit 1
		)
		order by id desc
		limit 1
	</select>

	<!-- chatid에 대한 room history의 소분류 카테고리 정보 수정. -->
	<update id="updateCategoryOfRoomHistory" parameterType="map">
		update room_join_history
		set category_small_id = #{categorySmallId} 
		where 1=1
		and id = #{chatId}
	</update>


</mapper>











