<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="message">

	<parameterMap type="com.scglab.connect.services.message.Message" id="message"></parameterMap>
	<resultMap type="com.scglab.connect.services.message.Message" id="message"></resultMap>
	
	<!-- 채팅메세지 목록 -->
	<select id="findByRoomIdAll" parameterType="map" resultMap="message">
		SELECT
		  r.join_message_id,
		  m.*,
		  IFNULL(s.is_customer, 0) as is_customer,
		  (
		    SELECT COUNT(1)
		    FROM message_read
		    WHERE message_id = m.id
		    AND read_date is null
		  ) no_read_count,
		  r.name as room_name,
		  s.name as speaker_name
		FROM v_room r
			INNER JOIN chat_message m ON r.id = m.room_id
			LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE r.id = #{roomId}
		AND m.id >= r.join_message_id
		ORDER BY m.id
	</select>
	
	
	<!-- 메시지 조회 : 범위. -->
	<select id="findRangeById" parameterType="map" resultMap="message">
		SELECT 
		  m.*,
		  (
		    CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
		  ) AS is_customer,
		  (
		    SELECT
		      COUNT(1)
		    FROM
		      message_read
		    WHERE
		      message_id = m.id
		      AND read_date is null
		  ) not_read_count,
		  r.name as room_name,
		  s.name as speaker_name
		FROM  room r 
		INNER JOIN chat_message m ON r.id = m.room_id
		LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE  r.id = #{roomId}
		AND m.id BETWEEN #{startMessageId} AND #{endMessageId}
	</select>

	
	<!-- 담당자 또는 고객이 보는 메세지 -->
	<select id="findByRoomIdToSpeaker" parameterType="map" resultMap="message">
		SELECT 
		  r.join_message_id, 
		  m.*,
		  (
		    CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
		  ) AS is_customer,
		  (
		    SELECT
		      COUNT(1)
		    FROM
		      message_read
		    WHERE
		      message_id = m.id
		      AND read_date is null
		  ) not_read_count,
		  r.name as room_name,
		  s.name as speaker_name
		FROM 
		  room r 
		  INNER JOIN chat_message m ON r.id = m.room_id
		  AND (
		    m.create_date > DATE_SUB(NOW(), INTERVAL #{intervalDay} DAY) 
		    OR m.id > (
		      SELECT 
		        MIN(read_last_message_id) 
		      FROM
		        room_speaker 
		      WHERE 
		        room_id = r.id
		    )
		  )
		  LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE 
		  r.id = #{roomId} 
		  AND (
		    CASE WHEN IFNULL(#{startId}, '') = '' THEN 1 = 1 ELSE m.id <![CDATA[<]]> #{startId} END
		  ) 
		  AND m.message_admin_type <![CDATA[<=]]> IFNULL(#{messageAdminType}, 0) 
		ORDER BY 
		  m.id DESC 
		LIMIT #{pageSize}
	
	</select>
	
	<!-- 담당자가 아닌 관리자 또는 조회자 권한이 있는 사용자가 조회시 -->
	<select id="findByRoomIdToAdmin" parameterType="map" resultMap="message">
		SELECT 
		  r.join_message_id, 
		  m.*,
		  (
		    CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
		  ) AS is_customer,
		  (
		    SELECT
		      COUNT(1)
		    FROM
		      message_read
		    WHERE
		      message_id = m.id
		      AND read_date is null
		  ) no_read_count,
		  r.name as room_name,
		  s.name as speaker_name
		FROM 
		  room r 
		  INNER JOIN chat_message m ON r.id = m.room_id 
		  AND m.create_date > DATE_SUB(NOW(), INTERVAL #{intervalDay} DAY)
		  LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE 
		  r.id = #{roomId} 
		  AND m.id >= r.join_message_id
		ORDER BY 
		  m.id DESC 
		LIMIT #{pageSize}
	</select>
	
	<!-- 메세지 읽음 처리 -->
	<update id="updateMessageNotReadCount" parameterType="map">
		UPDATE chat_message 
		SET    not_read_count = not_read_count - 1
		WHERE  room_id = #{roomId} 
		AND    ( 
             CASE 
                    WHEN #{startId} = #{lastId} THEN id = #{startId} 
                    ELSE id > #{startId}
                    AND    id <![CDATA[<=]]> #{lastId} 
             END
		)
	</update>
	
	<!-- 메세지 읽음 처리 -->
	<update id="updateRoomSpeakerReadLastMessage" parameterType="map">
		UPDATE room_speaker 
		SET    old_last_message_id = read_last_message_id, 
		       read_last_message_id = #{lastId} 
		WHERE  room_id = #{roomId} 
		       AND speaker_id = #{speakerId} 
	</update>
	
	<!-- 메세지 읽음 처리 -->
	<update id="updateMessageRead" parameterType="map">
		UPDATE message_read 
		SET    read_date = NOW() 
		WHERE  room_id = #{roomId} 
		       AND speaker_id = #{speakerId} 
		       AND message_id >= #{lastId} 
	</update>
	
	<!-- 메세지 생성 -->
	<select id="create" parameterType="map" resultMap="message" statementType="CALLABLE">
		CALL make_message(
			#{companyId}, #{roomId}, #{speakerId}, #{messageType}, #{isSystemMessage}, 
			#{message}, #{messageAdminType}, #{isEmployee}, #{messageDetail}, #{templateId}
		)
	</select>
	
	<!-- 메세지 조회(id range) : 메세지 유형이 시스템이 아닌 경우. -->
	<select id="findRangeByIdNotAdminType" parameterType="map" resultType="map">
		SELECT * 
		FROM   chat_message 
		WHERE  room_id = #{roomId} 
		       AND id BETWEEN #{startId} AND #{endId}
		       AND is_system_message = 0 
		       AND message_admin_type = 0
	</select>
	
	<!-- 읽은 메세지 사용자 수 -->
	<select id="getReadCountByMessageId" parameterType="map" resultType="int">
		SELECT COUNT(id) AS readCount 
		FROM   message_read 
		WHERE  message_id = #{id} 
			   AND read_date IS NULL 
	</select>
	
	<!-- 메세지 삭제 -->
	<delete id="delete" parameterType="map">
		DELETE
		FROM chat_message 
		WHERE  id = #{id} 
	</delete>
	
	<!-- 메세지 읽음 삭제 -->
	<delete id="deleteMessageRead" parameterType="map">
		DELETE
		FROM message_read 
		WHERE  message_id = #{id} 
	</delete>
	
	<!-- 메세지 상세 -->
	<select id="getDetail" parameterType="map" resultType="map">
		SELECT
		  m.*,
		  (
		    CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
		  ) AS is_customer,
		  (
		    SELECT
		      COUNT(1)
		    FROM
		      message_read
		    WHERE
		      message_id = m.id
		      AND read_date is null
		  ) not_read_count,
		  r.name as room_name,
		  s.name as speaker_name
		FROM 
		  room r 
		  INNER JOIN chat_message m ON r.id = m.room_id
		  LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE 
		  m.id = #{id}
	</select>
	
	<!-- 메시지 읽음 처리-->
	<update id="readMessage" parameterType="map" statementType="CALLABLE">
		CALL read_message(#{roomId}, #{speakerId}, #{startId}, #{endId})
	</update>
	
	
</mapper>