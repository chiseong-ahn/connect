<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="stats">

	<resultMap type="com.scglab.connect.services.stats.StatsCompany" id="statsCompany"></resultMap>
	<resultMap type="com.scglab.connect.services.stats.StatsMyToday" id="statsMyToday"></resultMap>
	
	
	<!-- 통계 : 회원 전체 기준 -->
	<select id="member" parameterType="map" resultType="map">
		SELECT
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  is_admin = 0
						AND company_id = #{companyId}) AS totalCount,
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  auth_level = 4
						AND company_id = #{companyId}) AS speakerCount,
				(SELECT COUNT(1)
					FROM   member
					WHERE  state = 0
						AND  is_admin = 0
						AND company_id = #{companyId}) AS ingCount,
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  auth_level = 3
						AND company_id = #{companyId}) AS managerCount
	</select>
	
	<!-- 통계 : 오늘의 나의 통계정보 -->
	<select id="myToday" parameterType="map" resultMap="statsMyToday">
		<![CDATA[
			select a.company_id, a.id as member_id
					,(
						select count(*)
						from room_join_history as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.start_message_id is not null
						and a1.create_date >= DATE_FORMAT(now(), '%Y-%m-%d')
					) as new_count
					,(
						select count(*) 
						from room as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.state < 8
						and a1.member_id is null
					) as ready_count
					,(
						select count(*) 
						from room as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.state < 2
					) as ing_count
					,(
						select count(*)
						from room_join_history as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.start_message_id is not null
						and a1.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and adddate(DATE_FORMAT(now(), '%Y-%m-%d') , 1)
					) as close_count
					, 0 as out_count
					,(
						select max(
								TIMESTAMPDIFF(
									SECOND,
									(
										select a1.create_date
										from chat_message as a1
										where 1=1
										and a1.room_id = a2.room_id
										and a1.id >= a2.start_message_id
										and a1.is_system_message = 0
										and a1.message_admin_type = 0
										and a1.is_employee = 0
										limit 1
									),	-- 고객의 최초 메시지 작성시간
									(
										select a1.create_date
										from chat_message as a1
										where 1=1
										and a1.room_id = a2.room_id
										and a1.id >= a2.start_message_id
										and a1.is_system_message = 0
										and a1.message_admin_type = 0
										and a1.is_employee = 1
										limit 1
									)	-- 상담사의 최초 메시지 작성 시간
								)
							)
						from room_join_history as a2
						where 1=1
						and a2.company_id = a.company_id
						and a2.member_id = a.id
						and a2.start_message_id is not null
						and a2.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and adddate(DATE_FORMAT(now(), '%Y-%m-%d') , 1)
					) as max_ready_minute
					,(
						select round(
								avg(
									TIMESTAMPDIFF(
										SECOND,
										(
											select a1.create_date
											from chat_message as a1
											where 1=1
											and a1.room_id = a2.room_id
											and a1.id >= a2.start_message_id
											and a1.is_system_message = 0
											and a1.message_admin_type = 0
											and a1.is_employee = 0
											limit 1
										),	-- 고객의 최초 메시지 작성시간
										(
											select a1.create_date
											from chat_message as a1
											where 1=1
											and a1.room_id = a2.room_id
											and a1.id >= a2.start_message_id
											and a1.is_system_message = 0
											and a1.message_admin_type = 0
											and a1.is_employee = 1
											limit 1
										)	-- 상담사의 최초 메시지 작성 시간
									)
								)
							)
						from room_join_history as a2
						where 1=1
						and a2.company_id = a.company_id
						and a2.member_id = a.id
						and a2.start_message_id is not null
						and a2.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and adddate(DATE_FORMAT(now(), '%Y-%m-%d') , 1)
					) as avg_ready_minute
					,(
						select max(
								TIMESTAMPDIFF(
									SECOND,
									(
										select a1.create_date
										from chat_message as a1
										where 1=1
										and a1.room_id = a2.room_id
										and a1.id >= a2.start_message_id
										and a1.create_date >= DATE_FORMAT(now(), '%Y-%m-%d')
										and a1.is_system_message = 0
										and a1.message_admin_type = 0
										and a1.is_employee = 1
										limit 1
									),	-- 고객의 최초 메시지 작성시간
									(
										select max(a1.create_date)
										from chat_message as a1
										where 1=1
										and a1.room_id = a2.room_id
										and a1.id >= a2.start_message_id
										and a1.create_date >= DATE_FORMAT(now(), '%Y-%m-%d')
										and a1.is_system_message = 0
										and a1.message_admin_type = 0
									)	-- 마지막 메시지 작성 시간
								)
							)
						from room_join_history as a2
						where 1=1
						and a2.company_id = a.company_id
						and a2.member_id = a.id
						and a2.start_message_id is not null
						and a2.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and adddate(DATE_FORMAT(now(), '%Y-%m-%d') , 1)
					) as max_speak_minute
					,(
						select round(
								avg(
									TIMESTAMPDIFF(
										SECOND,
										(
											select a1.create_date
											from chat_message as a1
											where 1=1
											and a1.room_id = a2.room_id
											and a1.id >= a2.start_message_id
											and a1.create_date >= DATE_FORMAT(now(), '%Y-%m-%d')
											and a1.is_system_message = 0
											and a1.message_admin_type = 0
											and a1.is_employee = 1
											limit 1
										),	-- 고객의 최초 메시지 작성시간
										(
											select max(a1.create_date)
											from chat_message as a1
											where 1=1
											and a1.room_id = a2.room_id
											and a1.id >= a2.start_message_id
											and a1.create_date >= DATE_FORMAT(now(), '%Y-%m-%d')
											and a1.is_system_message = 0
											and a1.message_admin_type = 0
										)	-- 마지막 메시지 작성 시간
									)
								)
							)
						from room_join_history as a2
						where 1=1
						and a2.company_id = a.company_id
						and a2.member_id = a.id
						and a2.start_message_id is not null
						and a2.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and adddate(DATE_FORMAT(now(), '%Y-%m-%d') , 1)
					) as avg_speak_minute
			from member As a
			where 1=1
			and a.company_id = #{companyId}
			and a.id = #{loginId}
		]]>
	</select>
	
	<!-- 통계 : 기간 검색 -->
	<select id="search" parameterType="map" resultMap="statsCompany">
		select 	a.company_id
				,sum(a.chatbot_use_count) as chatbot_use_count
				,sum(a.talk_system_enter_count) as talk_system_enter_count
				,sum(a.new_count) as new_count
				,sum(a.ready_count) as ready_count
				,sum(a.ing_count) as ing_count 
				,sum(a.close_count) as close_count
				,sum(a.out_count) as out_count
				,sum(a.speak_count) as speak_count
				,max(a.max_ready_minute) as max_ready_minute
				,max(a.max_speak_minute) as max_speak_minute
				,round(avg(a.avg_ready_minute)) as avg_ready_minute
				,round(avg(a.avg_speak_minute)) as avg_speak_minute
				,round(avg(a.avg_member_speak_count)) as avg_member_speak_count
				,sum(a.beforeDayPlusCount) as beforeDayPlusCount
		from (
			select a.*
					,cast(a.speak_count as signed) - ifnull((
						select b.speak_count
						from stats_company as b
						where 1=1
						and b.company_id = a.company_id
						and b.save_date <![CDATA[<]]> a.save_date
						order by b.save_date desc
						limit 1
					), 0) as beforeDayPlusCount
			from stats_company as a
			where 1=1
			and a.company_id = #{companyId}
			and a.save_date between #{startDate} and #{endDate}
		) as a
		where 1=1
		group by a.company_id
	</select>
	
	<!-- 통계 : 상담사별 분석 -->
	<select id="customerAnalysis" parameterType="map" resultType="map">
		select a.company_id as companyId
				,a.id
				,a.name
				,a.state
				,a.ing_count as ingCount
				,a.close_count as closeCount
				,a.week_close_count as recentCloseCount
				,a.close_count - a.yesterday_close_count as beforeDayPlusCount
		from(
			select a.id
					,a.company_id
					,a.name
					,a.state
					,(
						select count(*)
						from room as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.state <![CDATA[<]]> 2
						and a1.member_id = a.id
					) as ing_count
					,(
						select count(*)
						from room_join_history as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.end_date between DATE_FORMAT(adddate(now(), -1), '%Y-%m-%d') and DATE_FORMAT(now(), '%Y-%m-%d')
					) as yesterday_close_count
					,(
						select count(*)
						from room_join_history as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.end_date between DATE_FORMAT(now(), '%Y-%m-%d') and DATE_FORMAT(adddate(now(),1), '%Y-%m-%d')
					) as close_count
					,(
						select count(*)
						from room_join_history as a1
						where 1=1
						and a1.company_id = a.company_id
						and a1.member_id = a.id
						and a1.end_date between DATE_FORMAT(adddate(now(), -6), '%Y-%m-%d') and DATE_FORMAT(adddate(now(),1), '%Y-%m-%d')
					) as week_close_count
			from member as a
			where 1=1
			and a.company_id = #{companyId}
		)a
		where 1=1
		<choose>
			<when test='sort == "todayClose"'>
				order by a.close_count desc, a.name
			</when>
			<when test='sort == "recentClose"'>
				order by a.week_close_count desc, a.name
			</when>
		</choose>		
	</select>
	
	<!-- 통계 : 상담 사용 추이 -->
	<select id="useHistory" parameterType="map" resultMap="statsCompany">
		<if test='type != null and type != ""'>
			<choose>
				<when test='type == "day"'>
					select a.*
							,DATE_FORMAT(a.save_date, '%Y-%m') as month 
					from stats_company a
					where 1=1
					and a.company_id = #{companyId}
					and a.save_date between adddate(#{today}, -7) and #{today}
					order by a.save_date
				</when>
				<when test='type == "month"'>
					select a.*
							,DATE_FORMAT(a.save_date, '%Y-%m') as month 
					from stats_company a
					where 1=1
					and a.company_id = #{companyId}
					and a.save_date between date_add(#{today}, interval -1 month) and #{today} -- 한달
					order by a.save_date
				</when>
				<when test='type == "year"'>
					select	a.company_id,
							DATE_FORMAT(a.save_date, '%Y-%m') as save_date,
							sum(a.chatbot_use_count) as chatbot_use_count,
							sum(a.talk_system_enter_count) as talk_system_enter_count,
							sum(a.new_count) as new_count, 
							sum(a.ready_count) as ready_count,
							sum(a.ing_count) as ing_count,
							sum(a.close_count) as close_count, 
							sum(a.out_count) as out_count,
							sum(a.speak_count) as speak_count,
							max(a.max_ready_minute) as max_ready_minute,
							max(a.max_speak_minute) as max_speak_minute,
							avg(a.avg_ready_minute) as avg_ready_minute,
							avg(a.avg_speak_minute) as avg_speak_minute,
							avg(a.avg_member_speak_count) as avg_member_speak_count
					from stats_company a
					where 1=1
					and a.company_id = #{companyId}
					and a.save_date between date_add(#{today}, interval -1 year) and #{today} -- 일년
					group by a.company_id, DATE_FORMAT(a.save_date, '%Y-%m')
					order by a.company_id, DATE_FORMAT(a.save_date, '%Y-%m')
				</when>
			</choose>
			
		</if>
	</select>
	
	<!-- 통계 : 문의 유형별 통계 -->
	<select id="hashtag" parameterType="map" resultType="map">
		select  /* 문의 유형별 통계 */
				a.company_id as companyId
				,a.name
				,a.rank_num as currentRank
				,b.rank_num as beforeRank
				,case when b.rank_num is null then 'Y' else 'N' end isNew
		from stats_hashtag as a
			 left outer join stats_hashtag as b on (b.name = a.name and b.save_date = (
			 	select sh.save_date
				from stats_hashtag sh 
				where sh.save_date <![CDATA[<]]> #{searchDate}
				order by sh.save_date desc
				limit 1)
			 )
		where 1=1
		and a.company_id = #{companyId}
		and a.save_date = #{searchDate}
		order by a.rank_num, a.name
		limit 10
	</select>
	
	<!-- 통계 : 고객 만족도 -->
	<select id="review" parameterType="map" resultType="map">
		select /* 고객만족도 통계 */
				 round((a.score1 / a.total) * 100, 2) as score1
				,round((a.score2 / a.total) * 100, 2) as score2
				,round((a.score3 / a.total) * 100, 2) as score3
				,round((a.score4 / a.total) * 100, 2) as score4
				,round((a.score5 / a.total) * 100, 2) as score5
		from(
			select count(*) as total
				,sum(a.review_score1) as score1
				,sum(a.review_score2) as score2
				,sum(a.review_score3) as score3
				,sum(a.review_score4) as score4
				,sum(a.review_score5) as score5
			from(
				select   a.id
						,case when a.review_score = 1 then 1 else 0 end as review_score1
						,case when a.review_score = 2 then 1 else 0 end as review_score2
						,case when a.review_score = 3 then 1 else 0 end as review_score3
						,case when a.review_score = 4 then 1 else 0 end as review_score4
						,case when a.review_score = 5 then 1 else 0 end as review_score5
				from talk_review a
				where 1=1
				and a.company_id = #{companyId}
			)a
		)a
	</select>
	
	<!-- 일일 상담집계 처리 -->
	<insert id="createStatsCompanyDaily" parameterType="map">
		CALL stats_company_daily(#{companyId}, #{targetDate})
	</insert>
	
	<!-- 일일 유형별통계 집계처리 -->
	<insert id="createStatsHashtagDaily" parameterType="map">
		CALL stats_hashtag_daily(#{companyId}, #{targetDate})
	</insert>
	
</mapper>


