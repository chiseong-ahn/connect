<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="stats">
	
	<!-- 통계 : 회원 전체 기준 -->
	<select id="member" parameterType="map" resultType="map">
		SELECT
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  is_admin = 0) AS totalCount, 
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  auth_level = 4) AS speakerCount, 
				(SELECT COUNT(DISTINCT member_id) 
					FROM   room 
					WHERE  company_id = company.id
								AND member_id IS NOT NULL 
								AND state <![CDATA[<]]> 2) AS ingCount, 
				(SELECT COUNT(1) 
					FROM   member 
					WHERE  auth_level = 3) AS managerCount 
		FROM   company 
		WHERE  id = #{companyId}
	</select>
	
	<!-- 통계 : 오늘의 나의 통계정보 -->
	<select id="myToday" parameterType="map" resultType="map">
		<![CDATA[
		SET @p_today := curdate(), @p_id := #{loginId}
		
		select a.companyId
				,(
					select count(*)
					from room a1
					where 1=1
					and a1.company_id = a.company_id 
					and a1.member_id is null
					and a1.join_message_id is not null
					and a1.state < 2	
				) as readyCount	-- 대기중
				,(
					select count(*)
					from room a2
					where 1=1
					and a2.company_id = a.company_id 
					and a2.member_id = a.id
					and a2.state < 2
				) as ingCount		-- 진행중
				,(
					select count(*)
					from room a3
					where 1=1
					and a3.company_id = a.company_id 
					and a3.member_id  = a.id
					and a.create_date between @p_today and concat(@p_today, ' 23.59.59')
				) as newCount -- 신규접수
				,(	
					select count(*)
					from room_join_history a4
					where 1=1
					and a4.company_id = a.company_id 
					and a4.member_id = a.id
					and a4.end_date between @p_today and concat(@p_today, ' 23:59:59')
				) as closeCount	-- 종료건
				,0 as outCount 	-- 이탈건
				,ifnull((
					select max(consultSecond)
					from(
						select TIMESTAMPDIFF(
										SECOND,
										a5.create_date,
										a5.end_date
								) consultSecond
						from room_join_history a5
						where 1=1
						and a5.company_id = a.company_id 
						and a5.member_id = a.id
						and a5.end_date is not null
						and a5.create_date between @p_today and concat(@p_today, ' 06:34:34.0')
					) a2
				),0) as maxSpeakSecond
				,ifnull((
					select convert(avg(consultSecond), unsigned)
					from(
						select TIMESTAMPDIFF(
										SECOND,
										a5.create_date,
										a5.end_date
								) consultSecond
						from room_join_history a5
						where 1=1
						and a5.company_id = a.company_id 
						and a5.member_id = a.id
						and a5.end_date is not null
						and a5.create_date between @p_today and concat(@p_today, ' 06:34:34.0')
					) a2
				),0) as avgSpeakSecond
		from member a
		where 1=1
		and a.id = @p_id
		]]>
	</select>
	
	<!-- 통계 : 기간 검색 -->
	<select id="search" parameterType="map" resultType="map">
		
	</select>
	
	<!-- 통계 : 상담사별 분석 -->
	<select id="customerAnalysis" parameterType="map" resultType="map">
		
	</select>
	
	<!-- 통계 : 상담 사용 추이 -->
	<select id="useHistory" parameterType="map" resultType="map">
		
	</select>
	
	<!-- 통계 : 문의 유형별 통계 -->
	<select id="hashtag" parameterType="map" resultType="map">
		select  #{companyId} as companyId
				,a.name
				,a.rank_num as currentRank
				,b.rank_num as beforeRank
				,case when b.name is null then 'Y' else 'N' end isNew
		from(
			select '1' as company_id 
		 		,rank() over(order by a.count desc) as rank_num
				,b.name
				,a.count
			from(
				select a.category_small_id, count(*) as count
				from minwon_history a
				where 1=1
				and a.create_date between #{searchDate} and adddate(#{searchDate}, 1)
				and a.category_small_id is not null
				and a.company_id = #{companyId}
				group by a.category_small_id
			) a
				inner join category_small b on (b.id = a.category_small_id)
			where 1=1
		)a
			left outer join stats_hashtag b on (b.name = a.name and b.save_date = (
				select sh.save_date
				from stats_hashtag sh 
				where sh.save_date <![CDATA[<]]> #{searchDate}
				order by sh.save_date desc
				limit 1
			))
		where 1=1
		limit 10
	</select>
	
	<!-- 통계 : 고객 만족도 -->
	<select id="review" parameterType="map" resultType="map">
		select /* 고객만족도 현황 */
				 round((a.score1 / a.total) * 100, 2) as score1
				,round((a.score2 / a.total) * 100, 2) as score2
				,round((a.score3 / a.total) * 100, 2) as score3
				,round((a.score4 / a.total) * 100, 2) as score4
				,round((a.score5 / a.total) * 100, 2) as score5
		from(
			select count(*) as total
				,sum(a.review_score1) as score1
				,sum(a.review_score2) as score2
				,sum(a.review_score3) as score3
				,sum(a.review_score4) as score4
				,sum(a.review_score5) as score5
			from(
				select   a.id
						,case when a.review_score = 1 then 1 else 0 end as review_score1
						,case when a.review_score = 2 then 1 else 0 end as review_score2
						,case when a.review_score = 3 then 1 else 0 end as review_score3
						,case when a.review_score = 4 then 1 else 0 end as review_score4
						,case when a.review_score = 5 then 1 else 0 end as review_score5
				from talk_review a
				where 1=1
				and a.company_id = #{companyId}
			)a
		)a
	</select>
	
	<!-- 일일 상담집계 처리 -->
	<insert id="createStatsCompanyDaily" parameterType="map">
		CALL stats_company_daily(#{companyId}, #{targetDate})
	</insert>
	
	<!-- 일일 유형별통계 집계처리 -->
	<insert id="createStatsHashtagDaily" parameterType="map">
		CALL stats_hashtag_daily(#{companyId}, #{targetDate})
	</insert>
	
</mapper>


